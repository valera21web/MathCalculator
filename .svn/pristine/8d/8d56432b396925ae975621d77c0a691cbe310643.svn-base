package com.app.calculator.MathCalculator;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.app.calculator.Search.Search;


public class RePlace extends Validation{
	
	private static Convert Data = new Convert();
	
	public RePlace(){
		super();
	}
	
	protected static String MathFunction(String str){
		String tmpStr = "";
		double tmpDouble;
		List<Integer> IndexFun = Search.aSort(ReFun(str));
		for(int i = 0; i < IndexFun.size(); ++i)
		{
			tmpStr = str.substring(IndexFun.get(i), str.length());
			char[] StrChar = tmpStr.toCharArray();
			int count = 1, j;
			int t = tmpStr.indexOf("(");
			for( j = t + 1; count > 0 && j < tmpStr.length(); ++j){
				if((int)StrChar[j] == 40)
					++count;
				else if((int)StrChar[j] == 41)
					--count;
			}
			tmpStr = tmpStr.substring(0, j);
			tmpDouble = FunMath(tmpStr);
			str = str.replace(tmpStr, Data.add(tmpDouble));
		}
		str = ReOperand(str);
		return str;
	}
	
	protected static List<Integer> ReFun(String str){
		List<Integer> result = new ArrayList<Integer>();
		boolean Fl = false;
		do {
			Fl = false;
			if(str.indexOf("asin") != -1 && !Search.InList(str.indexOf("asin"), result)) {
				result.add(str.indexOf("asin"));
				str = str.replaceFirst("asin", "aaaa");
				Fl = true;
			} else if(str.indexOf("sin") != -1 && !Search.InList(str.indexOf("sin"), result)) {
				result.add(str.indexOf("sin"));
				str = str.replaceFirst("sin", "aaa");
				Fl = true;
			}
			
			if(str.indexOf("acos") != -1 && !Search.InList(str.indexOf("acos"), result)) {
				result.add(str.indexOf("acos"));
				str = str.replaceFirst("acos", "aaaa");
				Fl = true;
			} else if(str.indexOf("cos") != -1 && !Search.InList(str.indexOf("cos"), result)) {
				result.add(str.indexOf("cos"));
				str = str.replaceFirst("cos", "aaa");
				Fl = true;
			}
			
			if(str.indexOf("atan") != -1  && !Search.InList(str.indexOf("atan"), result)) {
				result.add(str.indexOf("atan"));
				str = str.replaceFirst("atan", "aaaa");
				Fl = true;
			} else if(str.indexOf("tan") != -1  && !Search.InList(str.indexOf("tan"), result)) {
				result.add(str.indexOf("tan"));
				str = str.replaceFirst("tan", "aaa");
				Fl = true;
			}
			
			if(str.indexOf("log") != -1  && !Search.InList(str.indexOf("log"), result)) {
				result.add(str.indexOf("log"));
				str = str.replaceFirst("log", "aaa");
				Fl = true;
			}

			if(str.indexOf("lg") != -1  && !Search.InList(str.indexOf("lg"), result)) {
				result.add(str.indexOf("lg"));
				str = str.replaceFirst("lg", "aa");
				Fl = true;
			}

			if(str.indexOf("ln") != -1  && !Search.InList(str.indexOf("ln"), result)) {
				result.add(str.indexOf("ln"));
				str = str.replaceFirst("ln", "aa");
				Fl = true;
			}

			if(str.indexOf("exp") != -1  && !Search.InList(str.indexOf("exp"), result)) {
				result.add(str.indexOf("exp"));
				str = str.replaceFirst("exp", "aaa");
				Fl = true;
			}

			if(str.indexOf("abs") != -1  && !Search.InList(str.indexOf("abs"), result)) {
				result.add(str.indexOf("abs"));
				str = str.replaceFirst("abs", "aaa");
				Fl = true;
			}
			
		} while(Fl);

	  return result;
	}
	
	
	protected static double FunMath(String arg){
		double result = 0.0;
		String fun = arg.substring(0,arg.indexOf("("));
		String paramStr = arg.substring(arg.indexOf("(") ,arg.length());
		paramStr = Brackets(paramStr); 
		double paramDouble = EasyStr(paramStr);
		double radians = Math.toRadians(paramDouble);       // value in radians
		double intDouble = 0.0;
		double doubleDouble = 0.0;
		double deg = 0.0;
		
		if(Search.Are(fun, "sin")) {
			result = Math.sin(radians);
		} else if(Search.Are(fun,"asin")) {
			if(paramDouble > 1) {
				doubleDouble =  paramDouble % 1;
				intDouble =  paramDouble - doubleDouble;
				deg = 90 * intDouble;
				paramDouble = doubleDouble;
			}
			result = Math.toDegrees(Math.asin(paramDouble));
			result += deg;
		} else if(Search.Are(fun,"cos")) {
			result = Math.cos(radians);
		} else if(Search.Are(fun,"acos")) {
			if(paramDouble > 1) {
				doubleDouble =  paramDouble % 1;
				intDouble =  paramDouble - doubleDouble;
				deg = 90 * intDouble;
				paramDouble = doubleDouble;
			}
			result = Math.toDegrees(Math.acos(paramDouble));
			result = intDouble % 2 == 1 ? deg + (90 -result) : deg + result ;
		} else if(Search.Are(fun,"tan")) {
			paramDouble = paramDouble == 90 ? 0 : Math.toRadians(paramDouble);
			result = Math.tan(paramDouble);
		} else if(Search.Are(fun,"atan")) {
			result = Math.toDegrees(Math.atan(paramDouble));
		} else if(Search.Are(fun,"log")) {
			result = Math.log(paramDouble);
		} else if(Search.Are(fun,"lg")) {
			result = Math.log10(paramDouble);
		} else if(Search.Are(fun ,"ln")) {
			result = Math.log1p(paramDouble);
		} else if(Search.Are(fun ,"exp")) {
			result = Math.exp(paramDouble);
		} else if(Search.Are(fun ,"abs")) {
			result = Math.abs(doubleDouble);
		}
		
		// round return value
		BigDecimal res = new BigDecimal(result);
		res = res.setScale(4, BigDecimal.ROUND_HALF_DOWN);
		//return value
		return res.doubleValue();
	}
	
	protected static String Pi(String str){
		while(str.indexOf("Pi") != -1)
			str = str.replace("Pi", Data.add(Math.PI));

	  return str;
	}

	protected static String E(String str){
		while(str.indexOf("E") != -1)
			str = str.replace("E", Data.add(Math.E));

	  return str;
	}
	
	protected static String Factorial(String str) {
		int i, key = 0, t = 0;
		double valD = 0, resultDouble = 0;
		String val = "",valSTR = "";
		char[] strChar =  str.trim().toCharArray();
		char[] strCharP = new char[]{'+','-','*','/','^','%','(',')'};
		
		while(str.indexOf('!') != -1) {
			t = str.indexOf('!')-1;
			if(strChar[t] != ')'){
				for(i = t; i >= 0; --i){
					if(!Search.InArray(strChar[i],strCharP))
						key = i;
					else
						break;
				}
				val = str.substring(key,str.indexOf('!'));
				valSTR = str.substring(key,str.indexOf('!'));
			} else {
				int count = 1;
				for(i = t-1;count > 0 && i >= 0; --i){
					if((int)strChar[i] == 40)
						--count;
					else if((int)strChar[i] == 41)
						++count;
				}
				val = Brackets(str.substring(i + 1, str.indexOf('!')) );
				valSTR = str.substring(i + 1, str.indexOf('!'));
			}
			valD = EasyStr(val);
			resultDouble = F((int)valD);
			str = str.replace(valSTR + "!", Data.add(resultDouble));
			str = ReOperand(str);
			strChar =  str.trim().toCharArray();
		} 
	  return str;
	}
	
	protected static String Modulo(String str) {
		int i, keyL = 0,keyR = 0, t = 0;
		double val1D = 0,val2D = 0, resultDouble = 0;
		String val1 = "", val2 = "",valSTR1 = "",valSTR2 = "";
		char[] strChar =  str.trim().toCharArray();
		char[] strCharP = new char[] { '+', '-', '*', '/', '^', '%', '(', ')' };
		
		while(str.indexOf('%') != -1) {
			t = str.indexOf('%')-1;
			if(strChar[t] != ')'){
				for(i = t; i >= 0; --i) {
					if(!Search.InArray(strChar[i],strCharP))
						keyL = i;
					else
						break;
				}
				val1 = str.substring(keyL,str.indexOf('%'));
				valSTR1 = str.substring(keyL,str.indexOf('%'));
			} else {
				int count = 1;
				for(i = t - 1; count > 0 && i >= 0; --i){
					if((int)strChar[i] == 40){
						--count;
					}else if((int)strChar[i] == 41)
						++count;
				}
				val1 = Brackets( str.substring(i+1,str.indexOf('%')) );
				valSTR1 = str.substring(i+1,str.indexOf('%'));
			}
			
			if(strChar[t + 2] != '(') {
				for(i = t + 2; i < str.length(); ++i){
					if(!Search.InArray(strChar[i], strCharP))
						keyR = i;
					else
						break;
				}
				val2 = str.substring(t + 2, keyR + 1);
				valSTR2 = str.substring(t + 2, keyR + 1);
			} else {
				int count = 1;
				for(i = t + 3; count > 0 && i < str.length(); ++i) {
					if((int)strChar[i] == 40)
						++count;
					else if((int)strChar[i] == 41)
						--count;
				}
				val2 = Brackets(str.substring(t + 2, i));
				valSTR2 = str.substring(t+2,i);
			}
			val1D = EasyStr(val1);
			val2D = EasyStr(val2);
			resultDouble = val1D % val2D;
			str = str.replace(valSTR1 + "%" + valSTR2, Data.add(resultDouble));
			str = ReOperand(str);
			strChar =  str.trim().toCharArray();
		} 
	  return str;
	}
	
	protected static String Brackets(String str){
		String strRep = "";
		char[] strChar =  str.trim().toCharArray();
		int i, t;
		int count = 0;
		
		while((t = str.indexOf('(')) != -1) {
			count = 1;
			for(i = t + 1; count > 0 && i >= 0; ++i){
				if((int)strChar[i] == 40)
					t = i;
				else if((int)strChar[i] == 41)
					--count;
			}
			strRep = str.substring(t, i);
			str = str.replace(strRep, Data.add(SubBrackets(strRep)));
			str = ReOperand(str);
			strChar =  str.trim().toCharArray();
		}
	  return str;
	}
	protected static double SubBrackets(String str){
	  double result = 0;
		str = str.substring(1, str.length() - 1);
		str = Factorial(str);         
		str = Modulo(str);            
		str = Degree(str);  
		str = Multiplication(str);
		str = Division(str);
		result = EasyStr(str);
	  return result;
	}
	protected static String Multiplication(String str){
		int i, key = 0, t = 0;
		double val1D = 0, val2D = 0, resultDouble = 0;
		String val1 = "", val2 = "";
		char[] strChar =  str.trim().toCharArray();
		char[] strCharP = new char[]{'+','-','*','/','^'};
		
		while(str.indexOf('*') != -1) {
			t = str.indexOf('*') - 1;
			for(i = t; i >= 0; --i) {
				if(!Search.InArray(strChar[i],strCharP))
					key = i;
                else
					break;
			}
			val1 = str.substring(key,str.indexOf('*'));
			val1D = EasyStr(val1);
			
			t = str.indexOf('*') + 1;
			key = t;
			for(int j = t+1; j<str.length(); ++j){
				if(!Search.InArray(strChar[j],strCharP))
					key = j;
				else
					break;
			}
			val2 = str.substring(str.indexOf('*')+1,key+1);
			val2D = EasyStr(val2);
			
			resultDouble = val1D * val2D;
			str = str.replace(val1 + "*" + val2, Data.add(resultDouble));
			str = ReOperand(str);
			strChar =  str.trim().toCharArray();
		} 
		
		return str;
	}
	
	protected static String Division(String str){
		int i, key = 0, t = 0;
		double val1D = 0, val2D = 0, resultDouble = 0;
		String val1 = "", val2 = "";
		char[] strChar =  str.trim().toCharArray();
		char[] strCharP = new char[]{'+','-','*','/','^'};
		
		while(str.indexOf("/") != -1) {
			t = str.indexOf("/")-1;
			for(i = t; i >= 0; --i){
				if(!Search.InArray(strChar[i],strCharP))
					key = i;
				else
					break;
			}
			val1 = str.substring(key,str.indexOf("/"));
			val1D = EasyStr(val1);
			
			t = str.indexOf("/")+1;
			key = t;
			for(int j = t+1; j<str.length(); ++j) {
				if(!Search.InArray(strChar[j],strCharP))
					key = j;
				else
					break;
			}
			val2 = str.substring(str.indexOf("/") + 1, key + 1);
			val2D = EasyStr(val2);
			
			resultDouble = val1D / val2D;
			str = str.replace(val1 + "/" + val2,  Data.add(resultDouble));
			str = ReOperand(str);
			strChar =  str.trim().toCharArray();
		} 
		
		return str;
	}
	
	protected static String Degree(String str){
		int i, key = 0, korId = 0;
		char[] strChar =  str.trim().toCharArray();
		char[] strCharP = new char[]{'+','-','*','/','^'};
		while(str.indexOf("^") != -1) {
			double resQuad = 1;
			String val = "",valAll = "", step = "",stepAll = "";
			double valD = 0, stepD = 0;
			int t;
			t = str.indexOf("^") - 1;
			for(i = t; i>=0; --i) {
				if(!Search.InArray(strChar[i],strCharP))
					key = i;
				else
					break;
			}
			val = str.substring(key,str.indexOf("^") + korId);
			valAll = korId == -1 ? "(" + val + ")" : val ;
			valD = EasyStr(val);
			
			t = str.indexOf("^") + 1;
			key = t;
            korId = 0;
			for(int j = t+1; j<str.length(); ++j) {
				if(!Search.InArray(strChar[j],strCharP))
					key = j;
				else
					break;
			}
			step = str.substring(str.indexOf("^") + 1, key + 1);
			stepAll = korId == 1 ? "(" + step + ")" : step ;
			stepD = EasyStr(step);
			
			resQuad = Math.pow(valD, stepD);
			str = str.replace(valAll + "^" + stepAll, Data.add(resQuad));
			str = ReOperand(str);
			strChar =  str.trim().toCharArray();
		}
		return str;
	}
	
	protected static double EasyStr(String str){
		int i;
		double result = 0;
		String tmp = "";
		char[] strChar =  str.trim().toCharArray();
		char[] CharArray = new char[]{'+','-'};
		List<Double> listVal = new ArrayList<Double>();
		List<Integer> listOperandInt = new ArrayList<Integer>();
		List<String> listOperand = new ArrayList<String>();
		
		tmp += strChar[0];
		for(i = 1; i < strChar.length; ++i) {
			if(Search.InArray(strChar[i],CharArray)){
				if(tmp.indexOf("0v") != -1)
					listVal.add(Data.get(tmp));
				else
					listVal.add(Double.parseDouble(tmp));

				listOperand.add(Character.toString(strChar[i]));
				listOperandInt.add((int)strChar[i]);
				tmp = "";
			} else
				tmp += strChar[i];
		}    
		if(tmp.indexOf("0v") != -1)
			listVal.add(Data.get(tmp));
		else
			listVal.add(Double.parseDouble(tmp));
		
		result += listVal.get(0);
		for(i = 0; i<listOperand.size(); ++i) {
			if(listOperandInt.get(i) == 43)
			    result += listVal.get(i+1);
			else if(listOperandInt.get(i) == 45)
					result -= listVal.get(i+1);
		}
		BigDecimal res = new BigDecimal(result);
		res = res.setScale(16, BigDecimal.ROUND_HALF_DOWN);
		result = res.doubleValue();
		
		return result;
	}
	
	static long F(int val) {  // factorial
		long result = 1L; 
		if(val > 1) {
			for(int i = 1; i <= val; ++i)
				result *= i;
        } else if(val == 0)
			result = 0; 
		return result;
	}
}
