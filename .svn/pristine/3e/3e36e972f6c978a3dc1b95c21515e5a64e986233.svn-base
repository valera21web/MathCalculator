package com.app.calculator.MathCalculator;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.app.calculator.R;
import com.app.calculator.DB.DB;
import com.app.calculator.DB.Read.DBRead;
import com.app.calculator.DB.Write.DBWrite;
import com.app.calculator.Search.Search;
import com.app.calculator.Steck.Steck;
import android.content.ContentValues;
import android.content.Context;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;

public class Calculator extends RePlace  {
	private DBWrite db_write;
	private DBRead db_read;
	private Context Content;
	private Steck last_math_str = new Steck(10);

	
	public Calculator(Context C) {
		super();
		Content = C;
	}
	
	public double ans(String arg, EditText editText, ListView historyList){
		double result = 0;
		db_write = new DBWrite(Content);
		db_read = new DBRead(Content);
		
		if(arg.length() == 0)
			return 0;
		if(arg.length() >= 40){
			editText.setTextSize(12f);
		}else if(arg.length() >= 35){
			editText.setTextSize(14f);
		}else if(arg.length() >= 28){
			editText.setTextSize(16f);
		}else if(arg.length() >= 22){
			editText.setTextSize(20f);
		}else if(arg.length() >= 16){
			editText.setTextSize(25f);
		}else if(arg.length() >= 1 ){
			editText.setTextSize(32f);
		}
		
		switch(Validation.Valid(arg)) {
			case 1:
				arg = Validation.Optimization(arg, editText);
				try{
					arg = Pi(arg);
					arg = E(arg);
					
					arg = MathFunction(arg);      //rePlace all Math Function [ sin(), cos(), ln() .... ]
					arg = Factorial(arg);         //rePlace all Factorial [ ! ]
					arg = Modulo(arg);            //rePlace all Modulo [ % ]
					arg = Brackets(arg);          //rePlace all Brackets [ ( ) ]
					arg = Degree(arg);            //rePlace all Degree[ x^y ]
					arg = Multiplication(arg);    //rePlace all Multiplication [ * ]
					arg = Division(arg);          //rePlace all Division [ / ]
					result = EasyStr(arg);        //summ(arg)
					
					BigDecimal res = new BigDecimal(result);
					res = res.setScale(16, BigDecimal.ROUND_HALF_DOWN); // round 
					result = res.doubleValue();
				} catch(Exception ex) {
					//editText.setError("Error format");
				}
				break;
			case 2:
				editText.setError("Empty string");
				break;
			case 3:
				editText.setError("Error with operator");
				break;
			case 4:
				editText.setError("Error with brackets");
				break;
		}
	  return result;
	}
	
	public boolean saveToHistory(String math_row, Double answer) {
		if(Validation.Valid(math_row) == 1) {
			if(!Search.is_integer(math_row) && !last_math_str.inStec(math_row)) {
				db_write.Query("" +
					"INSERT INTO "+ DB.TABLE_NAME_MATH_HISTORY +" ("+ DB.MATH_STR +","+ DB.MATH_ANS +") " +
					"VALUES('"+ math_row +"', '"+ answer +"')"
				);
				last_math_str.add(math_row);
				return true;
			}
		}
		return false;
	}
	
	public void getHistoryList(ListView historyList, int num) {
		String query = "" +
			"SELECT "+ DB.MATH_STR +"," + DB.MATH_ANS + " " +
			"FROM "+ DB.TABLE_NAME_MATH_HISTORY + " " +
			"ORDER BY " + DB.MATH_CREATE + " DESC" + " " +
			"LIMIT "+ num + ""
		;
		List<String> print_list = new ArrayList<String>();
		ContentValues TMP;
		String res_str = "";
		List<ContentValues> list = db_read.Query(query, new String[] {DB.MATH_STR, DB.MATH_ANS}, new String[] {"String", "String"});
		int count = list.size();
		for(int i = 0; i < count; ++i) {
			TMP = list.get(i);
			if(TMP.getAsString(DB.MATH_STR) != null && TMP.getAsString(DB.MATH_ANS) != null) {
				res_str = TMP.getAsString(DB.MATH_STR) + "=" + TMP.getAsString(DB.MATH_ANS);
				print_list.add(res_str);
			} else {
				print_list.add(Content.getString(R.string.emptyHistory));
			}
		}
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(Content, android.R.layout.simple_list_item_1, print_list); 
		historyList.setAdapter(adapter);	
        	
	}
	
	public void initHistoryList(int num) {
		if(last_math_str.empty()) {
			String query = "" +
				"SELECT "+ DB.MATH_STR +"," + DB.MATH_ANS + " " +
				"FROM "+ DB.TABLE_NAME_MATH_HISTORY + " " +
				"ORDER BY " + DB.MATH_CREATE + " DESC" + " " +
				"LIMIT "+ num + ""
			;
			List<ContentValues> list = db_read.Query(query, new String[] {DB.MATH_STR, DB.MATH_ANS}, new String[] {"String", "String"});
			int count = list.size();
			for(int i = 0; i < count; ++i) {
				last_math_str.add(list.get(i).getAsString(DB.MATH_STR));
			}    
		}
	}
	
}
