package com.app.calculator.DB.Read;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.app.calculator.DB.DB;

public class DBRead extends DB{
	
	private SQLiteDatabase db;

	public DBRead(Context context) {
		super(context);
		db = this.getReadableDatabase();
	}
	
	public List<ContentValues> Query(String table, String[] columns, String[] Typecolumns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy){
		Cursor c = db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);
		List<ContentValues> Result = new ArrayList<ContentValues>();
		int count_columns = Typecolumns.length;
		c.moveToFirst();
	    do {
	    	ContentValues TMP = new ContentValues();
	        if (c.getCount() > 0)
	        {
	        	for(int i = 0; i < count_columns; ++i){
	        		int column_index = c.getColumnIndex(columns[i]);
	        		
	        		if(Typecolumns[i] == "String") {
	        			TMP.put(columns[i], c.getString(column_index));
	        		} else if(Typecolumns[i] == "Blob") {
	        			TMP.put(columns[i], c.getBlob(column_index));
	        		} else if(Typecolumns[i] == "Double") {
	        			TMP.put(columns[i], c.getDouble(column_index));
	        		} else if(Typecolumns[i] == "Float") {
	        			TMP.put(columns[i], c.getFloat(column_index));
	        		} else if(Typecolumns[i] == "Int") {
	        			TMP.put(columns[i], c.getInt(column_index));
	        		} else if(Typecolumns[i] == "Long") {
	        			TMP.put(columns[i], c.getLong(column_index));
	        		}
	        	}
	        }
			Result.add(TMP);
	    } while (c.moveToNext());		
        return Result;
	}
	public List<ContentValues> Query(String select, String[] columns, String[] Typecolumns) {
		Log.v("ANS"," Query = '" + select +"';");
		Cursor c = db.rawQuery(select, null);
		List<ContentValues> Result = new ArrayList<ContentValues>();
		int count_columns = Typecolumns.length;
		c.moveToFirst();
	    do {
	    	ContentValues TMP = new ContentValues();
	        if (c.getCount() > 0) {
	        	for(int i = 0; i < count_columns; ++i){
	        		int column_index = c.getColumnIndex(columns[i]);
	        		
	        		if(Typecolumns[i] == "String") {
	        			TMP.put(columns[i], c.getString(column_index));
	        		} else if(Typecolumns[i] == "Blob") {
	        			TMP.put(columns[i], c.getBlob(column_index));
	        		} else if(Typecolumns[i] == "Double") {
	        			TMP.put(columns[i], c.getDouble(column_index));
	        		} else if(Typecolumns[i] == "Float") {
	        			TMP.put(columns[i], c.getFloat(column_index));
	        		} else if(Typecolumns[i] == "Int") {
	        			TMP.put(columns[i], c.getInt(column_index));
	        		} else if(Typecolumns[i] == "Long") {
	        			TMP.put(columns[i], c.getLong(column_index));
	        		}
	        		//Log.v("ANS"," SELECT: '"+ columns[i] + " = " + TMP.get(columns[i]) +"';");
	        	}
	        }
			Result.add(TMP);
	    } while (c.moveToNext());		
        return Result;
	}
	
	public void Close(){
		db.close();
	}
	
}
